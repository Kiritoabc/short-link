// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"github.com/Kiritoabc/short-link/backend/pkg/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newShortLink(db *gorm.DB, opts ...gen.DOOption) shortLink {
	_shortLink := shortLink{}

	_shortLink.shortLinkDo.UseDB(db, opts...)
	_shortLink.shortLinkDo.UseModel(&model.ShortLink{})

	tableName := _shortLink.shortLinkDo.TableName()
	_shortLink.ALL = field.NewAsterisk(tableName)
	_shortLink.ID = field.NewInt32(tableName, "id")
	_shortLink.OriginalURL = field.NewString(tableName, "original_url")
	_shortLink.ShortCode = field.NewString(tableName, "short_code")
	_shortLink.CreatedAt = field.NewTime(tableName, "created_at")

	_shortLink.fillFieldMap()

	return _shortLink
}

type shortLink struct {
	shortLinkDo

	ALL         field.Asterisk
	ID          field.Int32
	OriginalURL field.String
	ShortCode   field.String
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (s shortLink) Table(newTableName string) *shortLink {
	s.shortLinkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shortLink) As(alias string) *shortLink {
	s.shortLinkDo.DO = *(s.shortLinkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shortLink) updateTableName(table string) *shortLink {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.OriginalURL = field.NewString(table, "original_url")
	s.ShortCode = field.NewString(table, "short_code")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *shortLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shortLink) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["original_url"] = s.OriginalURL
	s.fieldMap["short_code"] = s.ShortCode
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s shortLink) clone(db *gorm.DB) shortLink {
	s.shortLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shortLink) replaceDB(db *gorm.DB) shortLink {
	s.shortLinkDo.ReplaceDB(db)
	return s
}

type shortLinkDo struct{ gen.DO }

type IShortLinkDo interface {
	gen.SubQuery
	Debug() IShortLinkDo
	WithContext(ctx context.Context) IShortLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShortLinkDo
	WriteDB() IShortLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShortLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShortLinkDo
	Not(conds ...gen.Condition) IShortLinkDo
	Or(conds ...gen.Condition) IShortLinkDo
	Select(conds ...field.Expr) IShortLinkDo
	Where(conds ...gen.Condition) IShortLinkDo
	Order(conds ...field.Expr) IShortLinkDo
	Distinct(cols ...field.Expr) IShortLinkDo
	Omit(cols ...field.Expr) IShortLinkDo
	Join(table schema.Tabler, on ...field.Expr) IShortLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShortLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShortLinkDo
	Group(cols ...field.Expr) IShortLinkDo
	Having(conds ...gen.Condition) IShortLinkDo
	Limit(limit int) IShortLinkDo
	Offset(offset int) IShortLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShortLinkDo
	Unscoped() IShortLinkDo
	Create(values ...*model.ShortLink) error
	CreateInBatches(values []*model.ShortLink, batchSize int) error
	Save(values ...*model.ShortLink) error
	First() (*model.ShortLink, error)
	Take() (*model.ShortLink, error)
	Last() (*model.ShortLink, error)
	Find() ([]*model.ShortLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShortLink, err error)
	FindInBatches(result *[]*model.ShortLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ShortLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShortLinkDo
	Assign(attrs ...field.AssignExpr) IShortLinkDo
	Joins(fields ...field.RelationField) IShortLinkDo
	Preload(fields ...field.RelationField) IShortLinkDo
	FirstOrInit() (*model.ShortLink, error)
	FirstOrCreate() (*model.ShortLink, error)
	FindByPage(offset int, limit int) (result []*model.ShortLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShortLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shortLinkDo) Debug() IShortLinkDo {
	return s.withDO(s.DO.Debug())
}

func (s shortLinkDo) WithContext(ctx context.Context) IShortLinkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shortLinkDo) ReadDB() IShortLinkDo {
	return s.Clauses(dbresolver.Read)
}

func (s shortLinkDo) WriteDB() IShortLinkDo {
	return s.Clauses(dbresolver.Write)
}

func (s shortLinkDo) Session(config *gorm.Session) IShortLinkDo {
	return s.withDO(s.DO.Session(config))
}

func (s shortLinkDo) Clauses(conds ...clause.Expression) IShortLinkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shortLinkDo) Returning(value interface{}, columns ...string) IShortLinkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shortLinkDo) Not(conds ...gen.Condition) IShortLinkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shortLinkDo) Or(conds ...gen.Condition) IShortLinkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shortLinkDo) Select(conds ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shortLinkDo) Where(conds ...gen.Condition) IShortLinkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shortLinkDo) Order(conds ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shortLinkDo) Distinct(cols ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shortLinkDo) Omit(cols ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shortLinkDo) Join(table schema.Tabler, on ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shortLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shortLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shortLinkDo) Group(cols ...field.Expr) IShortLinkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shortLinkDo) Having(conds ...gen.Condition) IShortLinkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shortLinkDo) Limit(limit int) IShortLinkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shortLinkDo) Offset(offset int) IShortLinkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shortLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShortLinkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shortLinkDo) Unscoped() IShortLinkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shortLinkDo) Create(values ...*model.ShortLink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shortLinkDo) CreateInBatches(values []*model.ShortLink, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shortLinkDo) Save(values ...*model.ShortLink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shortLinkDo) First() (*model.ShortLink, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortLink), nil
	}
}

func (s shortLinkDo) Take() (*model.ShortLink, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortLink), nil
	}
}

func (s shortLinkDo) Last() (*model.ShortLink, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortLink), nil
	}
}

func (s shortLinkDo) Find() ([]*model.ShortLink, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShortLink), err
}

func (s shortLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShortLink, err error) {
	buf := make([]*model.ShortLink, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shortLinkDo) FindInBatches(result *[]*model.ShortLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shortLinkDo) Attrs(attrs ...field.AssignExpr) IShortLinkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shortLinkDo) Assign(attrs ...field.AssignExpr) IShortLinkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shortLinkDo) Joins(fields ...field.RelationField) IShortLinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shortLinkDo) Preload(fields ...field.RelationField) IShortLinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shortLinkDo) FirstOrInit() (*model.ShortLink, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortLink), nil
	}
}

func (s shortLinkDo) FirstOrCreate() (*model.ShortLink, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortLink), nil
	}
}

func (s shortLinkDo) FindByPage(offset int, limit int) (result []*model.ShortLink, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shortLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shortLinkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shortLinkDo) Delete(models ...*model.ShortLink) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shortLinkDo) withDO(do gen.Dao) *shortLinkDo {
	s.DO = *do.(*gen.DO)
	return s
}
